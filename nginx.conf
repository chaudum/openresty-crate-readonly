#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush      on;

    keepalive_timeout  65;

    gzip  on;

    upstream crate {
        server crate1.example.com:4200;
        server crate2.example.com:4200;
    }

    server {
        listen 4220;

        location = /_sql {
            # only permit POST requests
            if ($request_method !~ ^(POST)$ ) {
                return 403;
            }

            # request access to POST body
            lua_need_request_body on;

            # define access using lua
            access_by_lua '
              -- load json package
              cjson = require "cjson"
              -- read POST body
              local body = ngx.req.get_body_data()
              if body then
                -- decode JSON string into object
                local data = cjson.decode(body)
                -- check lower case stmt value
                if not string.match(string.lower(data.stmt), "^select.*") then
                  -- if sql statement does not start with SELECT
                  -- return HTTP 403
                  ngx.exit(ngx.HTTP_FORBIDDEN)
                end
              else
                -- if no POST date
                -- return HTTP 403
                ngx.exit(ngx.HTTP_FORBIDDEN)
              end
            ';

            # set proxy headers
            proxy_set_header User-Agent $http_user_agent;
            proxy_set_header Accept "*/json";

            # set upstream timeout
            # complex queries may take some time
            proxy_read_timeout 60s;

            # conditions in which case to try the next upstream server
            # note: on timeout you must not try another upstream,
            #       otherwise you'd invoke a statement several times
            proxy_next_upstream error invalid_header http_500 http_502 http_503;

            # define upstream
            proxy_pass http://crate;

        }

    }

}
